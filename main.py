#!/usr/bin/env python3
"""
POSTPRESS - Local Development Server
–ü—Ä–æ—Å—Ç–æ–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è frontend —á–∞—Å—Ç–∏ —Å–∞–π—Ç–∞ —ç–ª–∏—Ç–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–∏
"""

import http.server
import socketserver
import webbrowser
import os
import sys
from pathlib import Path
import urllib.request
import urllib.error
from urllib.parse import urljoin

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PORT = 8000
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
FRONTEND_DIR = os.path.join(BASE_DIR, "frontend")
BACKEND_URL = "http://localhost:5000"  # URL –±—ç–∫–µ–Ω–¥–∞

class CustomHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å HTML —Ñ–∞–π–ª–∞–º–∏ –∏ API –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=FRONTEND_DIR, **kwargs)
    
    def end_headers(self):
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, DELETE')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        super().end_headers()
    
    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.send_response(200)
        self.end_headers()
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ API –Ω–∞ –±—ç–∫–µ–Ω–¥
        if self.path.startswith('/api/'):
            self.proxy_request('GET')
            return
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        elif self.path.startswith('/uploads/'):
            filename = os.path.basename(self.path)
            file_path = os.path.join(BASE_DIR, 'backend', 'uploads', filename)
            if os.path.exists(file_path):
                self.send_response(200)
                self.send_header('Content-type', 'image/jpeg')
                self.end_headers()
                with open(file_path, 'rb') as f:
                    self.wfile.write(f.read())
                return
            else:
                self.send_error(404, "File not found")
                return
            
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        if self.path == '/':
            self.path = '/index.html'
        elif self.path == '/admin' or self.path == '/admin/':
            self.path = '/admin.html'
        
        return super().do_GET()
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path.startswith('/api/'):
            self.proxy_request('POST')
            return
        self.send_error(404, "Not Found")
    
    def do_PUT(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ PUT –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path.startswith('/api/'):
            self.proxy_request('PUT')
            return
        self.send_error(404, "Not Found")
    
    def do_DELETE(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ DELETE –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path.startswith('/api/'):
            self.proxy_request('DELETE')
            return
        self.send_error(404, "Not Found")
    
    def proxy_request(self, method):
        """–ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –±—ç–∫–µ–Ω–¥"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –±—ç–∫–µ–Ω–¥–∞
            backend_url = urljoin(BACKEND_URL, self.path)
            
            # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            content_length = int(self.headers.get('Content-Length', 0))
            body = self.rfile.read(content_length) if content_length > 0 else None
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
            request = urllib.request.Request(
                backend_url,
                data=body,
                method=method,
                headers={k: v for k, v in self.headers.items() if k.lower() not in ['host', 'content-length']}
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥
            with urllib.request.urlopen(request) as response:
                # –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                self.send_response(response.status)
                for header, value in response.getheaders():
                    if header.lower() not in ['server', 'date', 'transfer-encoding']:
                        self.send_header(header, value)
                self.end_headers()
                
                # –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
                self.wfile.write(response.read())
                
        except urllib.error.HTTPError as e:
            self.send_response(e.code)
            for header, value in e.headers.items():
                if header.lower() not in ['server', 'date', 'transfer-encoding']:
                    self.send_header(header, value)
            self.end_headers()
            self.wfile.write(e.read())
            
        except Exception as e:
            self.send_error(500, f"Proxy Error: {str(e)}")
    
    def log_message(self, format, *args):
        """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print(f"[{self.date_time_string()}] {format % args}")

def check_frontend_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    required_files = [
        'index.html',
        'admin.html', 
        'style.css',
        'admin.css',
        'script.js',
        'admin.js'
    ]
    
    frontend_path = Path(FRONTEND_DIR)
    if not frontend_path.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {FRONTEND_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    missing_files = []
    for file in required_files:
        if not (frontend_path / file).exists():
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    return True

def check_backend():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±—ç–∫–µ–Ω–¥–∞"""
    try:
        with urllib.request.urlopen(BACKEND_URL + '/api/works') as response:
            if response.status == 200:
                print("‚úÖ –ë—ç–∫–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
    except:
        print("‚ùå –ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        print(f"üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ {BACKEND_URL}")
        return False

def start_server():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä"""
    try:
        with socketserver.TCPServer(("", PORT), CustomHTTPRequestHandler) as httpd:
            server_url = f"http://localhost:{PORT}"
            admin_url = f"http://localhost:{PORT}/admin"
            
            print("\nüöÄ POSTPRESS - –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
            print("=" * 50)
            print(f"üì± –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç:  {server_url}")
            print(f"‚öôÔ∏è  –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:   {admin_url}")
            print("=" * 50)
            print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            print()
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            try:
                print("üåê –û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä...")
                webbrowser.open(server_url)
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä: {e}")
                print(f"   –û—Ç–∫—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é: {server_url}")
            
            print(f"üéØ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
            httpd.serve_forever()
            
    except KeyboardInterrupt:
        print("\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except OSError as e:
        if e.errno == 10048:  # Windows: –ø–æ—Ä—Ç –∑–∞–Ω—è—Ç
            print(f"‚ùå –ü–æ—Ä—Ç {PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
            print(f"   - –ó–∞–∫—Ä—ã—Ç—å –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
            print(f"   - –ò–∑–º–µ–Ω–∏—Ç—å PORT –≤ {__file__}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üì¶ POSTPRESS - –≠–ª–∏—Ç–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞")
    print("   –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    if not check_frontend_files():
        print("\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ç–∫–µ–Ω–¥
    if not check_backend():
        print("\nüí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –±—ç–∫–µ–Ω–¥, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç")
        sys.exit(1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {BASE_DIR}")
    print(f"üóÇÔ∏è  –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: {FRONTEND_DIR}")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    start_server()

if __name__ == "__main__":
    main() 
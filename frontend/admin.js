const API_BASE = window.location.origin;

let works = [];
let currentWork = null;
let workToDelete = null;
let selectedImages = [];
let existingImages = [];

// Show notification
function showNotification(message, isError = false) {
    const notification = document.getElementById('notification');
    notification.textContent = message;
    notification.className = `toast ${isError ? 'error' : 'success'} show`;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥, —É—Å–ø–µ—à–Ω—ã–µ - —á–µ—Ä–µ–∑ 3
    const hideTimeout = isError ? 5000 : 3000;
    
    setTimeout(() => {
        notification.className = 'toast';
    }, hideTimeout);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (isError) {
        console.error('Admin Error:', message);
    } else {
        console.log('Admin Success:', message);
    }
}

// Modal management
function showModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.add('show');
        document.body.style.overflow = 'hidden';
    }
}

function hideModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.remove('show');
        document.body.style.overflow = '';
    }
}

// Load works
async function loadWorks() {
    try {
        const worksGrid = document.getElementById('worksGrid');
        worksGrid.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—Ç...</div>';
        
        const response = await fetch(`${API_BASE}/api/works`);
        
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP ${response.status}: ${errorText}`);
        }
        
        const data = await response.json();
        works = Array.isArray(data) ? data : [];
        renderWorks();
        
        if (works.length === 0) {
            showNotification('–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—É—Å—Ç–æ. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —É–ø–∞–∫–æ–≤–∫—É!');
        } else {
            showNotification(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${works.length} –æ–±—Ä–∞–∑–µ—Ü(–æ–≤) —É–ø–∞–∫–æ–≤–∫–∏`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—Ç:', error);
        showNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—Ç: ${error.message}`, true);
        document.getElementById('worksGrid').innerHTML = `
            <div class="empty-portfolio">
                <div class="empty-portfolio-icon">‚ùå</div>
                <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç</p>
                <button class="btn btn-primary" onclick="loadWorks()">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É</button>
            </div>
        `;
    }
}

// Render works
function renderWorks() {
    const worksGrid = document.getElementById('worksGrid');
    
    if (works.length === 0) {
        worksGrid.innerHTML = `
            <div class="empty-portfolio">
                <div class="empty-portfolio-icon">üì¶</div>
                <h3>–ü–æ–∫–∞ –Ω–µ—Ç —É–ø–∞–∫–æ–≤–∫–∏</h3>
                <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —É–ø–∞–∫–æ–≤–∫—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —É–ø–∞–∫–æ–≤–∫—É"</p>
            </div>
        `;
        return;
    }
    
            worksGrid.innerHTML = works.map(work => {
        const imageUrl = work.images && work.images.length > 0 
            ? `${API_BASE}/uploads/${work.images[0]}`
            : null;
        const imageCount = work.images ? work.images.length : 0;
            
        return `
            <div class="portfolio-item">
                <div class="portfolio-image" ${imageUrl ? `style="background-image: url('${imageUrl}')"` : ''}>
                    ${imageCount > 0 ? `<div class="portfolio-images-count">üì∑ ${imageCount} —Ñ–æ—Ç–æ</div>` : ''}
                </div>
                <div class="portfolio-content">
                    <h3 class="portfolio-title">${work.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
                    <p class="portfolio-description">${work.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
                    <div class="portfolio-area">${work.area || ''}</div>
                    <div class="portfolio-actions">
                        <button class="btn btn-secondary btn-sm" onclick="editWork('${work.id}')">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                        <button class="btn btn-danger btn-sm" onclick="showDeleteModal('${work.id}')">–£–¥–∞–ª–∏—Ç—å</button>
                    </div>
                </div>
            </div>
        `;
    }).join('');
}

// Show add work modal
function showAddWorkModal() {
    currentWork = null;
    selectedImages = [];
    existingImages = [];
    
    document.getElementById('modalTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —É–ø–∞–∫–æ–≤–∫—É';
    document.getElementById('workForm').reset();
    document.getElementById('workId').value = '';
    document.getElementById('imagePreview').innerHTML = '';
    document.getElementById('saveButton').textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–ø–∞–∫–æ–≤–∫—É';
    
    showModal('workModal');
}

// Edit work
function editWork(workId) {
    const work = works.find(w => w.id === workId);
    if (!work) return;
    
    currentWork = work;
    selectedImages = [];
    existingImages = [...work.images];
    
    document.getElementById('modalTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É';
    document.getElementById('workId').value = work.id;
    document.getElementById('workTitle').value = work.title || '';
    document.getElementById('workDescription').value = work.description || '';
    document.getElementById('workArea').value = work.area || '';
    document.getElementById('saveButton').textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
    
    // Show existing images
    const imagePreview = document.getElementById('imagePreview');
    imagePreview.innerHTML = existingImages.map((filename, index) => `
        <div class="image-preview-item">
            <img src="${API_BASE}/uploads/${filename}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" class="image-preview-img">
            <button type="button" class="image-preview-remove" onclick="removeExistingImage(${index})">&times;</button>
        </div>
    `).join('');
    
    showModal('workModal');
}

// Hide work modal
function hideWorkModal() {
    hideModal('workModal');
    currentWork = null;
    selectedImages = [];
    existingImages = [];
}

// Handle image selection (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ DOMContentLoaded)

function handleImageSelection(event) {
    const files = Array.from(event.target.files);
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp', 'image/bmp', 'image/tiff'];
    const maxSize = 32 * 1024 * 1024; // 32MB
    
    files.forEach(file => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if (!allowedTypes.includes(file.type)) {
            showNotification(`–§–∞–π–ª "${file.name}" –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPG, PNG, GIF, WebP, BMP, TIFF`, true);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if (file.size > maxSize) {
            showNotification(`–§–∞–π–ª "${file.name}" —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 32MB`, true);
            return;
        }
        
        if (file.size === 0) {
            showNotification(`–§–∞–π–ª "${file.name}" –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç`, true);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (selectedImages.length >= 10) {
            showNotification('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: 10', true);
            return;
        }
        
        selectedImages.push(file);
        
        const reader = new FileReader();
        reader.onload = (e) => {
            const imagePreview = document.getElementById('imagePreview');
            const index = selectedImages.length - 1;
            
            const imageItem = document.createElement('div');
            imageItem.className = 'image-preview-item';
            imageItem.innerHTML = `
                <img src="${e.target.result}" alt="–ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" class="image-preview-img">
                <button type="button" class="image-preview-remove" onclick="removeSelectedImage(${index})">&times;</button>
                <div class="image-info">
                    <small>${file.name}</small>
                    <small>${(file.size / 1024 / 1024).toFixed(2)} MB</small>
                </div>
            `;
            
            imagePreview.appendChild(imageItem);
        };
        
        reader.onerror = () => {
            showNotification(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ "${file.name}"`, true);
        };
        
        reader.readAsDataURL(file);
    });
    
    event.target.value = '';
}

// Remove selected image
function removeSelectedImage(index) {
    selectedImages.splice(index, 1);
    
    // Re-render image preview
    const imagePreview = document.getElementById('imagePreview');
    const existingImagesHtml = existingImages.map((filename, idx) => `
        <div class="image-preview-item">
            <img src="${API_BASE}/uploads/${filename}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" class="image-preview-img">
            <button type="button" class="image-preview-remove" onclick="removeExistingImage(${idx})">&times;</button>
        </div>
    `).join('');
    
    const selectedImagesHtml = selectedImages.map((file, idx) => {
        const url = URL.createObjectURL(file);
        return `
            <div class="image-preview-item">
                <img src="${url}" alt="–ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" class="image-preview-img">
                <button type="button" class="image-preview-remove" onclick="removeSelectedImage(${idx})">&times;</button>
            </div>
        `;
    }).join('');
    
    imagePreview.innerHTML = existingImagesHtml + selectedImagesHtml;
}

// Remove existing image
async function removeExistingImage(index) {
    const filename = existingImages[index];
    
    if (currentWork) {
        try {
            const response = await fetch(`${API_BASE}/api/works/${currentWork.id}/images/${filename}`, {
                method: 'DELETE'
            });
            
            if (response.ok) {
                existingImages.splice(index, 1);
                
                // Re-render image preview
                const imagePreview = document.getElementById('imagePreview');
                const existingImagesHtml = existingImages.map((filename, idx) => `
                    <div class="image-preview-item">
                        <img src="${API_BASE}/uploads/${filename}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" class="image-preview-img">
                        <button type="button" class="image-preview-remove" onclick="removeExistingImage(${idx})">&times;</button>
                    </div>
                `).join('');
                
                const selectedImagesHtml = selectedImages.map((file, idx) => {
                    const url = URL.createObjectURL(file);
                    return `
                        <div class="image-preview-item">
                            <img src="${url}" alt="–ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" class="image-preview-img">
                            <button type="button" class="image-preview-remove" onclick="removeSelectedImage(${idx})">&times;</button>
                        </div>
                    `;
                }).join('');
                
                imagePreview.innerHTML = existingImagesHtml + selectedImagesHtml;
                
                showNotification('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
            showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', true);
        }
    } else {
        existingImages.splice(index, 1);
    }
}

// Handle work save
async function handleWorkSave(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const workData = {
        title: formData.get('title').trim(),
        description: formData.get('description').trim(),
        area: formData.get('area').trim()
    };
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!workData.title) {
        showNotification('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', true);
        return;
    }
    
    if (workData.title.length < 3) {
        showNotification('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞', true);
        return;
    }
    
    if (workData.title.length > 100) {
        showNotification('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)', true);
        return;
    }
    
    const saveButton = document.getElementById('saveButton');
    const originalText = saveButton.textContent;
    saveButton.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
    saveButton.disabled = true;
    
    try {
        let workId;
        
        if (currentWork) {
            // Update existing work
            const response = await fetch(`${API_BASE}/api/works/${currentWork.id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(workData)
            });
            
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã');
            workId = currentWork.id;
        } else {
            // Create new work
            const response = await fetch(`${API_BASE}/api/works`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(workData)
            });
            
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã');
            const newWork = await response.json();
            workId = newWork.id;
        }
        
        // Upload new images with proper error handling
        let uploadedCount = 0;
        let errorCount = 0;
        
        for (let i = 0; i < selectedImages.length; i++) {
            const image = selectedImages[i];
            const imageFormData = new FormData();
            imageFormData.append('image', image);
            
            try {
                const uploadResponse = await fetch(`${API_BASE}/api/works/${workId}/images`, {
                    method: 'POST',
                    body: imageFormData
                });
                
                if (uploadResponse.ok) {
                    const result = await uploadResponse.json();
                    uploadedCount++;
                    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${result.filename}`);
                } else {
                    const error = await uploadResponse.json();
                    console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è "${image.name}":`, error.error);
                    showNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ "${image.name}": ${error.error}`, true);
                    errorCount++;
                }
            } catch (error) {
                console.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ "${image.name}":`, error);
                showNotification(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ "${image.name}"`, true);
                errorCount++;
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (uploadedCount > 0 && errorCount === 0) {
            showNotification(`–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ (${uploadedCount})`);
        } else if (uploadedCount > 0 && errorCount > 0) {
            showNotification(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${uploadedCount}, –æ—à–∏–±–æ–∫: ${errorCount}`, true);
        } else if (errorCount > 0) {
            showNotification(`–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏ (${errorCount})`, true);
        }
        
        showNotification(currentWork ? '–†–∞–±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞' : '–†–∞–±–æ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
        hideWorkModal();
        loadWorks();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã', true);
    } finally {
        saveButton.textContent = originalText;
        saveButton.disabled = false;
    }
}

// Show delete modal
function showDeleteModal(workId) {
    workToDelete = workId;
    showModal('deleteModal');
}

// Hide delete modal
function hideDeleteModal() {
    hideModal('deleteModal');
    workToDelete = null;
}

// Confirm delete
async function confirmDelete() {
    if (!workToDelete) return;
    
    try {
        const response = await fetch(`${API_BASE}/api/works/${workToDelete}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã');
        
        showNotification('–†–∞–±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞');
        hideDeleteModal();
        loadWorks();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã', true);
    }
}

// Initialize
document.addEventListener('DOMContentLoaded', () => {
    loadWorks();
    
    // Add event listeners for form
    const imageInput = document.getElementById('imageInput');
    if (imageInput) {
        imageInput.addEventListener('change', handleImageSelection);
    }
    
    const workForm = document.getElementById('workForm');
    if (workForm) {
        workForm.addEventListener('submit', handleWorkSave);
    }
}); 